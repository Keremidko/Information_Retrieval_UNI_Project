<?xml version="1.0" encoding="UTF-8" standalone="no"?><Article><Title>Backed By Google Ventures And Eric Schmidt  Urban Engines Wants To Solve Urban Congestion Using Data Intelligence</Title><Url>http://techcrunch.com/2014/05/15/backed-by-google-ventures-and-eric-schmidt-urban-engines-wants-to-solve-urban-congestion-using-data-intelligence/</Url><Content>It’s no secret that as our population grows, buses, trains and other transportation infrastructure in cities are becoming more congested. Public transportation departments use qualitative date from surveys, and video cameras to understand congestion, but Urban Engines believes that this can be done in a more efficient, quantitative way using intelligent algorithms and big data analysis. The company, which has raised an undisclosed amount of funding from Google Ventures, Eric Schmidt, Ram Shriram, A16Z and SV Angel, was founded by Balaji Prabhakar, Deepak Merugu and former Google engineers Shiva Shivakumar, Giao Nguyen. Shivakumar was previously a VP Engineering and Distinguished Entrepreneur at Google (2001-2010), and helped build Adsense, Search Appliances and Cloud Apps at the search giant. Prabhakar is a Stanford professor and Director of the Stanford Center for Societal Networks, a prominent research initiative to make societal networks smarter, more scalable and more efficient. The idea for Urban Engines stemmed from Prabhakar’s own research around urban congestion and understanding supply and demand, how people are using public transportation and how we can shift people’s behavior from peak to off-peak. Prabhakar and Shivakumar have created a SaaS that any transportation authority can implement in order to track congestion. Urban Engines’ software uses existing data from city transit systems and generates insights from spatial analytics to create a dynamic digital replica of a city’s transportation system. The software also helps cities implement incentive systems rooted in behavioral economics, which help increase commuter engagement and alleviate congestion during peak travel times with rewards for commuter shifts. The data comes from a simple marker: when people swipe their cards or tokens to enter and exit a train or bus. This data is collected by subway systems and buses for payments processing but isn’t used to actually determine congestion. Urban Engines’ algorithms mash-up this data at scale, and can determine how crowded every bus or train is within a system, wait times, historical data and more. As Prabhakar explains, this is “crowd sensing” at its best. The company is using people’s swipes as sensors and piecing together where people are in a system. If it sounds complicated, it is. The team has been working on these algorithms and technology for years. Shivakumar tells me, “These transit authorities know where the trains are, but they don’t know where the people are.” The company’s software is licensed by transportation authorities and once deployed in the cloud, Urban Engines can show them how many people entered a train at a certain stop, which trains are overcrowded, waiting times, lines and much more. And it gets really interesting when authorities can compare this data with historical data and gain insights on where they need to add or remove lines, or buses. Urban Engines already has a number of trials being implemented. In partnership with World Bank, Sao Paolo, Brazil is implementing Urban Engines insights solution for the city’s bus system. Singapore is leveraging Urban Engines incentives solution to shift commuter behavior from peak to off-peak on the MRT railway system. And Washington D.C. has deployed Urban Engines for the DC Metro railway system. The company explains that they want to be able to make transit systems more efficient in the 100 most populated cities in the World. Urban Engines could be on to something. With the software, the company is allowing cities to gain an understanding around a system and make planning decisions that may take years, vs. weeks with its software. That can save municipalities money and time.  View Slideshow Previous Next Exit -</Content></Article>