<?xml version="1.0" encoding="UTF-8" standalone="no"?><Article><Title>The Supreme Court And Your Software Patents</Title><Url>http://techcrunch.com/2014/06/28/the-supreme-court-and-software-patents/</Url><Content>Editor’s note: Michael Gulliford is the Founder and Managing Principal of the Soryn IP Group,a new breed of patent management and advisory company that provides a host of patent-centric services to a select group of innovators.   The Supreme Court recently issued its long-awaited opinion in Alice Corp. v. CLS Bank Int’l, known more affectionately in many circles as the Supreme Court case deciding whether software is patentable. Although the Supreme Court did not tackle that broader question in its June 19 opinion, it did address whether CLS Corp. should be allowed to patent the concept of mitigating settlement risk implemented in software. And the Supreme Court’s analysis of that issue should have important implications for anyone with interests in software patents. Alice Corp. owns several patents related to computerized schemes for mitigating “settlement risk” — i.e. the risk that only one party to an agreed-upon financial exchange will satisfy its obligation. Although the practice of risk mitigation had existed long before Alice Corp. sought to patent the software version of doing so, Alice Corp. argued to the Supreme Court that it should be able to patent the process of implementing risk mitigation so long as a computer implemented that process. The Supreme Court disagreed. It has long been recognized that “abstract ideas” are not patentable. Although difficult to ascertain the line between a patentable software invention and an unpatentable abstract idea, the Supreme Court provided the software industry with guidance. When analyzing whether a software patent relates to nothing more than an impermissible abstract idea, the Supreme Court says that you should look at a patents’ claim, i.e. the part of the patent that defines the metes and bounds of the invention. If a particular software patent’s claims can be distilled to a general concept that was in existence long before someone thought to implement the concept in software, there is a good chance it is an unpatentable abstract idea. Examples would include playing cards, ways of doing business, and even activities like auctions. After all, these are concepts that existed long before computer programmers wrote code to implement them in a program. And according to the Supreme Court, the only way to convert these otherwise unpatentable abstract ideas into a patentable invention is to show something else in the patent’s claims that make it a new invention. Such “newness” does not result simply by using a computer to implement a concept that has long since been around. It could result, however, when the software patent achieves some new result not previously attainable, requires novel computer operations to operate or improves the functioning of the hardware itself. Are things still murky in the patent software space? Unquestionably so, particularly since most software can be distilled to an abstract concept and the Supreme Court does not believe that simply implementing such a concept with a normal computer will qualify that subject matter for patentability. What is clear, however, is that the weapon of many non-practicing entities (more commonly known as “patent trolls”) — the business-method software patent — is likely dead. Why? Because these patents generally relate to the use of known computer methods to implement known ways of doing business — the hallmark of invalidity under the Supreme Court’s new decision. Also at risk are software patents directed to concepts that occurred in real life, before being implemented in software. Above we provide the examples of gaming patents, but the list goes on and on. In light of these developments, CEOs and inventors without unlimited budgets may be well-advised to proceed with caution before incurring the tremendous costs associated with seeking software patent protection. Unless the underlying technology improves the functioning of the hardware, is implemented by novel computer operations or relates to a concept not already generally known, the risks and costs of seeking patent protection may far outweigh the questionable rewards.</Content></Article>