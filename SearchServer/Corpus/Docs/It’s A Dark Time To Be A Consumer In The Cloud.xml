<?xml version="1.0" encoding="UTF-8" standalone="no"?><Article><Title>It’s A Dark Time To Be A Consumer In The Cloud</Title><Url>http://techcrunch.com/2012/08/11/its-a-dark-time-to-be-a-consumer-in-the-cloud/</Url><Content>Ecco Pro, a much beloved outliner and personal information management application for Windows was discontinued about 15 years ago. But you can still download it and run it on Windows 7 today thanks to the efforts of a handful of volunteers. Even though the software isn’t open source a few devotees have continued modding it and keeping it current for modern operating systems. They say that no modern application has yet replicated its functionality. Another piece of software with longevity is Eudora, which as of 2009 was still in use by Steve Wozniak as per an interview with Lifehacker. Wozniak didn’t say which version he’s using, but since he says it’s been discontinued, I assume he’s using Eudora 6.2.4 or earlier, not the newer Thunderbird based Open Source Edition. I’ve heard of people using versions as old as 3. They say they can still do stuff with it they just can’t do with anything else. If these were web applications, what are the odds people would still be using them today, more than a decade after they were officially discontinued? And are there any new web applications out today that are so good that 15 years from now users will still be clinging to them? I bring this up because of an editorial Wozniak wrote this week on the dangers of the cloud. It’s sort of an odd piece. I don’t disagree with Wozniak’s take on “the cloud,” here meaning basically the consumer web, but it seems like the trouble he had was actually with a piece of desktop software. If I understand what Wozniak wrote correctly, BusyCal had problems after Wozniak updated to Mountain Lion and deleted one of his clouds, which happened to be stored in the cloud. Had it been a local calendar could it not too have been corrupted by a system update? But like I said, I think he’s right. These feel like dark times indeed to be a consumer or an individual professional. If you’re an enterprise with big money to spend you can negotiate your service level agreement and your data storage policies. If you’re an individual, you just accept the TOS or STFU. Doc Searls has been complaining about this for years, but despite there being a few examples of his “vendor relationship management” idea in the wild, it still feels like vaporware to me. And even if you find a TOS you agree with, there’s no reason a company can’t go changing it on you. I remember Edward Borasky, a frequent commenter here and at places like ReadWriteWeb, writing that consumers should have the right to know what a company’s business model is. That way you know what they’re going to be doing with your data and make an informed decision about whether you’re going to feed that data into a company. Great idea. Unless the company pivots or sells out. For a while the mantra was “don’t be a free user.” But sometimes people just won’t take your money. I would have paid money to keep Summify alive. And even if they take your money that’s no guarantee. ReadItLater started out as a paid app, but now it’s called Pocket and it’s a free service and who knows how they’re going to monetize it. Same thing happened with RunKeeper a while back. And ask a Sparrow users how “don’t be a free user” feels now. Hey, at least those Sparrow users can keep using that app for, hopefully, years to come, just like all those Eudora and Ecco Pro users. Most jilted users aren’t so lucky. In some cases a closed down web app gets open sources, like Ether Pad or Google Wave. But what if the app depends on some other third party cloud service that goes away? That brings me to another great thought piece on the cloud this week: Paul Miller’s “Desktop 2.0 and the future of the networked operating system. Miller wrote: For too long, desktop operating systems have skated by on an outdated model of the world. You would configure calendar “syncing,” you’d “upload” your documents, you’d “back up” your files — it’s like talking to the internet was a glorified version of Palm HotSync. The internet native experience in your browser offered a radically different vision where you never needed to “sync” new listings on eBay, where you could “share” a document instead of “send” it, and where your calendar was simply your calendar, not some frozen-in-time, frozen-in-place simulacrum of one. And that, in a round about way, brings us back to Wozniak’s original problem. The good thing is that frameworks like Meteor, Derby, Flatiron and Realtime may put more of our applications brains back on our desktops (or at least laptops), and store more of our data locally so that, at the very least, we have that handy should a web service croak (no guarantees about how they’re using the data on their end though). Which brings us in yet another round about back to a question we asked earlier: how much software is getting made that we’ll actually want to use 5, 10, 15 years down the line? James Kwak ruffled some feathers this week when he said that most software, even (especially) expensive enterprise software just isn’t that good. And, well, it isn’t. That’s especially bad news when you have to do a lot of syncing between desktop and cloud and mobile because syncing isn’t a trivial problem. So you end up with things happening like your calendar getting zapped during an OS update or all your notes reverting back to some random point a month ago (that happened to me). And you don’t even know who to blame because you’ve got a whole bunch of apps talking to each other all over the place and no one wants to take responsibility for the free apps they’ve published, let alone some other free app. It’s too early to say yet whether the frameworks I mentioned, or any other new development tools, will make this situation better or just make things worse. For one thing, you’re still not going to be able to stick to an old version of an app if someone makes a big change — one of the big features of Meteor is the ability of app developers to push changes to the client while the user is using the app. So what else can we do about it then? Wozniak suggests legislation, and some form of consumer data protection laws are probably needed. It’s going to be tough to make sure these laws aren’t fraught with loopholes that big companies (or companies backed by savvy VCs) can exploit at the expense of boot strappers and dabblers, as has been pointed out by Pete Warden, who knows a thing or two about getting promising experiments shut down. But yeah, something’s gotta be done. But that only solves one part of the problem. The part where crappy software deletes all your e-mail is harder to fix. Like Kwak says, “How can you write a rule saying that companies have to write good software?” It sounds kind of neat, but I don’t think a law that says companies have to open source discontinued software products and services would work out very well either. So what CAN be done? Photo by Kevin Dooley / CC</Content></Article>